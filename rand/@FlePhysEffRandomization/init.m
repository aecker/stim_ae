function r = init(r,params)
% AE 2008-09-03

% parameters that are randomized
r.conditions = struct('isFlash',{},'isMoving',{},'isStop',{}, ...
    'flashLocation',{},'barColor',{},'trajectoryAngle',{}, ...
    'direction',{},'dx',{},'arrangement',{});

%% Flashed and moving bars presented individually
%   In this case we present them both in the receptive fields of the neurons
if ~params.combined
    for i = 1:size(params.barColor,2)
        for angle = params.trajectoryAngle

            % flashes
            nLocs = params.numFlashLocs;
            r.conditions(end+(1:nLocs)) = ...
                struct('isFlash',1, ...
                       'isMoving',0, ...
                       'isStop',0, ...
                       'flashLocation',mat2cell(1:nLocs,1,ones(1,nLocs)), ...
                       'barColor',params.barColor(:,i), ...
                       'trajectoryAngle',angle, ...
                       'direction',NaN, ...
                       'dx',NaN, ...
                       'arrangement',1);

            % moving bars
            for dx = params.dx
                for dir = params.direction
                    r.conditions(end+1) = ...
                        struct('isFlash',0, ...
                               'isMoving',1, ...
                               'isStop',0, ...
                               'flashLocation',NaN, ...
                               'barColor',params.barColor(:,i), ...
                               'trajectoryAngle',angle, ...
                               'direction',dir, ...
                               'dx',dx, ...
                               'arrangement',0);
                    if params.flashStop
                        r.conditions(end+(1:nLocs)) = ...
                            struct('isFlash',0, ...
                                   'isMoving',1, ...
                                   'isStop',1, ...
                                   'flashLocation',mat2cell(1:nLocs,1,ones(1,nLocs)), ...
                                   'barColor',params.barColor(:,i), ...
                                   'trajectoryAngle',angle, ...
                                   'direction',dir, ...
                                   'dx',dx, ...
                                   'arrangement',0);
                    end
                end
            end
        end
    end
else
    for i = 1:size(params.barColor,2)
        for angle = params.trajectoryAngle
            for arr = params.arrangement

                % flashes
                nLocs = params.numFlashLocs;
                r.conditions(end+(1:nLocs)) = ...
                    struct('isFlash',1, ...
                           'isMoving',0, ...
                           'isStop',0, ...
                           'flashLocation',mat2cell(1:nLocs,1,ones(1,nLocs)), ...
                           'barColor',params.barColor(:,i), ...
                           'trajectoryAngle',angle, ...
                           'direction',NaN, ...
                           'dx',NaN, ...
                           'arrangement',arr);

                for dx = params.dx
                    for dir = params.direction
                        
                        % moving bars without flash
                        r.conditions(end+1) = ...
                            struct('isFlash',0, ...
                                   'isMoving',1, ...
                                   'isStop',0, ...
                                   'flashLocation',NaN, ...
                                   'barColor',params.barColor(:,i), ...
                                   'trajectoryAngle',angle, ...
                                   'direction',dir, ...
                                   'dx',dx, ...
                                   'arrangement',arr);
                        % combined flash and moving bars
                        r.conditions(end+(1:nLocs)) = ...
                            struct('isFlash',1, ...
                                   'isMoving',1, ...
                                   'isStop',0, ...
                                   'flashLocation',mat2cell(1:nLocs,1,ones(1,nLocs)), ...
                                   'barColor',params.barColor(:,i), ...
                                   'trajectoryAngle',angle, ...
                                   'direction',dir, ...
                                   'dx',dx, ...
                                   'arrangement',arr);

                        % flash-stop condition
                        if params.flashStop
                            r.conditions(end+1) = ...
                                struct('isFlash',0, ...
                                       'isMoving',1, ...
                                       'isStop',1, ...
                                       'flashLocation',NaN, ...
                                       'barColor',params.barColor(:,i), ...
                                       'trajectoryAngle',angle, ...
                                       'direction',dir, ...
                                       'dx',dx, ...
                                       'arrangement',arr);
                            r.conditions(end+(1:nLocs)) = ...
                                struct('isFlash',1, ...
                                       'isMoving',1, ...
                                       'isStop',1, ...
                                       'flashLocation',mat2cell(1:nLocs,1,ones(1,nLocs)), ...
                                       'barColor',params.barColor(:,i), ...
                                       'trajectoryAngle',angle, ...
                                       'direction',dir, ...
                                       'dx',dx, ...
                                       'arrangement',arr);
                        end
                    end
                end
            end
        end
    end
end

%% initialize WhiteNoiseRandomization on condition indices
r.white = setParams(WhiteNoiseRandomization,1:length(r.conditions));
